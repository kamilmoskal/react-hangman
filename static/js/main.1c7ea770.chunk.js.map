{"version":3,"sources":["img/0.png","img sync /^/.*/.png$","img/1.png","img/2.png","img/3.png","img/4.png","img/5.png","img/6.png","img/7.png","img/8.png","img/9.png","components/Hangman.js","components/Word.js","components/MissedLetters.js","newWordAction.js","components/Gamestate.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./0.png","./1.png","./2.png","./3.png","./4.png","./5.png","./6.png","./7.png","./8.png","./9.png","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","connect","state","hangmanState","props","hgImages","length","each","react_default","a","createElement","src","require","concat","alt","key","Math","random","className","Word","letters","this","letterList","class","letter","Component","missedletters","mL","newWord","dispatch","fetch","then","response","json","data","type","word","catch","error","Gamestate","handleNewWord","_this","reset","gameState","game","content","onClick","App","value","handleKeyboardPressState","setState","checkValue","_this2","window","addEventListener","String","fromCharCode","which","bg","components_Gamestate","components_Hangman","components_Word","components_MissedLetters","lifeWasted","Boolean","location","hostname","match","initState","rootReducer","arguments","undefined","action","toUpperCase","console","log","wordLetters","split","lettersArray","i","toConsumableArray","objectSpread","some","matchObjects","filter","currentState","forEach","every","missedLetters","hgS","lw","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c7ea770.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.573eee94.png\";","var map = {\n\t\"./0.png\": 17,\n\t\"./1.png\": 33,\n\t\"./2.png\": 34,\n\t\"./3.png\": 35,\n\t\"./4.png\": 36,\n\t\"./5.png\": 37,\n\t\"./6.png\": 38,\n\t\"./7.png\": 39,\n\t\"./8.png\": 40,\n\t\"./9.png\": 41\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 32;","module.exports = __webpack_public_path__ + \"static/media/1.8a13182c.png\";","module.exports = __webpack_public_path__ + \"static/media/2.447fef9d.png\";","module.exports = __webpack_public_path__ + \"static/media/3.38729b6a.png\";","module.exports = __webpack_public_path__ + \"static/media/4.9995da8a.png\";","module.exports = __webpack_public_path__ + \"static/media/5.8d06e28d.png\";","module.exports = __webpack_public_path__ + \"static/media/6.24dc1805.png\";","module.exports = __webpack_public_path__ + \"static/media/7.41b04240.png\";","module.exports = __webpack_public_path__ + \"static/media/8.95bceca9.png\";","module.exports = __webpack_public_path__ + \"static/media/9.5a3de260.png\";","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Hangman = (props) => {\r\n  const { hangmanState } = props\r\n\r\n  const hgImages = hangmanState.length ? (\r\n    hangmanState.map(each => {\r\n      return (\r\n        <img src={require(`../img/${each}.png`)} alt=\"\" key={Math.random()*10} className=\"hg-images\"/>\r\n      )\r\n    })\r\n  ) : (\r\n    <span></span>\r\n  )\r\n\r\n  return (\r\n        <div className=\"hangman\">\r\n          <img src={require('../img/0.png')} alt=\"\" className=\"hg-images grass\"/>\r\n            {hgImages}\r\n        </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    hangmanState: state.hangmanState\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Hangman)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Word extends Component {\r\n    render(){\r\n  \r\n        const { letters } = this.props\r\n     \r\n        const letterList = letters.length ? (\r\n            letters.map(each => {\r\n                return (\r\n                    <div className={'letter ' + each.class} key={each.id}><span className={each.class}>{each.letter}</span></div>\r\n                ) \r\n            })\r\n        ) : (\r\n            <span></span>\r\n        )\r\n        return (\r\n            <div className=\"word\">\r\n                {letterList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        letters: state.letters\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Word)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nconst MissedLetters = (props) => {\r\n  const { missedletters } = props\r\n\r\n  const mL = missedletters.length ? (\r\n    missedletters.map(each => {\r\n      return (\r\n        <div className=\"missedletter\" key={Math.random()*10}>{each}</div>\r\n      )\r\n    })\r\n  ) : (\r\n    <span></span>\r\n  )\r\n  \r\n\r\n  return (\r\n    <div className=\"missedletters\">\r\n        <span>Missed letters:</span>\r\n        {mL}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      missedletters: state.missedletters\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MissedLetters)\r\n","\r\nexport const newWord = () => {\r\n    return (dispatch) => {\r\n    \r\n        fetch('https://api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=true&maxCorpusCount=-1&minDictionaryCount=1&maxDictionaryCount=-1&minLength=4&maxLength=8&api_key=82cb40ed55fb0e7abe00509d3dd0f38baa90416783e9aafbb')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                dispatch({ type: 'NEW_WORD', word: data.word});\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'ERROR', error});\r\n            })\r\n        }\r\n    }\r\n        ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { newWord } from '../newWordAction'\r\n\r\nclass Gamestate extends Component {\r\n  handleNewWord = () => {\r\n    this.props.newWord();\r\n    this.props.reset();\r\n  }\r\n  render(){\r\n    const { gameState } = this.props\r\n    const game = gameState.state === 0 ? (\r\n        <div className=\"text\">\r\n          <span id=\"state\">LOADING ...</span>\r\n        </div>  \r\n    ) : (   \r\n      <div className=\"text\">\r\n        <span id=\"state\">{gameState.content}</span>\r\n        <span id=\"newword\" onClick={this.handleNewWord}>New Word</span>\r\n      </div>\r\n    )\r\n    \r\n    return (\r\n      <div className=\"gamestate\"> \r\n        {game}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    gameState: state.gameState\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      newWord: () => { dispatch(newWord()) },\r\n      reset: () => { dispatch({type: 'RESET' }) }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamestate)\r\n","import React, { Component } from 'react';\nimport Hangman from './components/Hangman'\nimport Word from './components/Word'\nimport MissedLetters from './components/MissedLetters'\nimport Gamestate from './components/Gamestate'\nimport { connect } from 'react-redux'\nimport { newWord } from './newWordAction'\n\nclass App extends Component {\n  state = {\n    value: \"\"\n  }\n  handleKeyboardPressState = (value) => {\n    this.setState({\n      value: value\n    },function(){\n      this.props.checkValue(this.state.value);\n    })\n  }\n  componentDidMount(){\n\n    this.props.newWord(); \n\n    window.addEventListener('keypress',(e) => {\n      let value = String.fromCharCode(e.which);\n      this.handleKeyboardPressState(value);\n    }, false);\n  }\n  render() {\n    const { gameState } = this.props\n    const bg = gameState.state === 0 || gameState.state === 1 || gameState.state === 2 ? <Gamestate /> : null\n    return (\n      <div className=\"App\">\n            {bg}\n          <div className=\"container grid\">\n            <Hangman />\n            <Word />\n            <MissedLetters />\n          </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    lifeWasted: state.lifeWasted,\n    gameState: state.gameState\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      newWord: () => { dispatch(newWord()) },\n      checkValue: (value) => { dispatch({type: 'CHECK_VALUE', value: value }) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    word: \"\",\r\n    letters: [],\r\n    missedletters: [],\r\n    hangmanState:[],\r\n    lifeWasted: 0,\r\n    gameState: {state: 0, content: \"\"}\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type === 'NEW_WORD') {\r\n        let word = action.word.toUpperCase()\r\n        console.log(word);\r\n        let wordLetters = word.split('');\r\n        let lettersArray = [];\r\n        for(let i=0; i < wordLetters.length; i++){\r\n            lettersArray = [...lettersArray, {letter: wordLetters[i] , id:\"\"+ i +\"\", class:\"hide\"}];\r\n        }\r\n        return {\r\n            ...state,\r\n            word: word,\r\n            letters: lettersArray,\r\n            gameState: {state: 3, content: \"\"}\r\n        }\r\n    } else if (action.type === 'ERROR') {\r\n        console.log(action.error)\r\n        return{\r\n            ...state,\r\n            gameState: {state: 2, content: \"Error\"}\r\n        }\r\n\r\n    } else if (action.type === 'RESET') {\r\n        return {\r\n            word: \"\",\r\n            letters: [],\r\n            missedletters: [],\r\n            hangmanState:[],\r\n            lifeWasted: 0,\r\n            gameState: {state: 0, content: \"\"}\r\n        }\r\n\r\n    } else if (action.type === 'CHECK_VALUE' && state.word) {\r\n\r\n        if (state.gameState.state === 1 || state.gameState.state === 2) {\r\n            return {\r\n                ...state,\r\n            }\r\n        } else {\r\n\r\n            let checkValue = state.letters.some(each => {\r\n                return each.letter === action.value.toUpperCase()\r\n            })\r\n            if (checkValue) {\r\n                let matchObjects = state.letters.filter(e => e.letter === action.value.toUpperCase())\r\n                \r\n                const currentState = [...state.letters]\r\n                matchObjects.forEach(e => {\r\n                    currentState[e.id].class = \"\";\r\n                })\r\n                let gameWon = currentState.every(e => {\r\n                    return e.class === \"\"\r\n                })\r\n                if (gameWon === true) {\r\n                    return {\r\n                        ...state,\r\n                        gameState: {state: 1, content: \"YOU WON!\"},\r\n                        letters: currentState\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        letters: currentState\r\n                    }\r\n                }\r\n            } else {\r\n                let isOnList = state.missedletters.some(e => {\r\n                    return e === action.value\r\n                })\r\n                if(!isOnList) {\r\n                    let missedLetters = [...state.missedletters, action.value]\r\n                    \r\n                    let hgS = [...state.hangmanState, state.lifeWasted+1]\r\n                    let lw = state.lifeWasted + 1\r\n                    \r\n                    if (lw === 9){\r\n                        return {\r\n                            ...state,\r\n                            missedletters: missedLetters,\r\n                            hangmanState: hgS,\r\n                            lifeWasted: lw,\r\n                            gameState: {state: 2, content: \"YOU LOST!\"}\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...state,\r\n                            missedletters: missedLetters,\r\n                            hangmanState: hgS,\r\n                            lifeWasted: lw\r\n                        }\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        \r\n                    }\r\n                }\r\n            }\r\n\r\n        }  \r\n    } else {\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './rootReducer';\n\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}